<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/4/7 0007 * Time: 11:01 */namespace app\system\controller;use app\common\model\ActivityCouponModel;use app\common\model\ActivityModel;use think\Db;use think\Request;class Activity extends Common{    public $agentId = 20;    /**     * 活动列表     */    public function index()    {        $activity_name = input("activity_name");        $agent_name = input("agent_name");        $agent_id = input("agent_id");        $status = input("status");        $map = [];//        $map["a.activity_agent_id"] = $agent_id;        if (trim($activity_name) != '') $map["a.activity_name"] = ['like',"%$activity_name%"];        if (trim($agent_name) != '') $map["ag.agent_name"] = ['like',"%$agent_name%"];        if (intval($agent_id) != 0) $map["ag.agent_id"] = ['eq',$agent_id];        if (intval($status) != 0) $map["a.activity_status"] = ['eq',$status];        $activityList = Db::name('activity')->alias("a")            ->join('agent ag', 'ag.agent_id = a.activity_agent_id', 'left')            ->join('supplier s', 's.supplier_id = a.activity_supplier_id', 'left')            ->join('goods g', 'g.goods_id = a.activity_goods_id', 'left')            ->where($map)            ->field("a.*,ag.agent_name,g.goods_name")            ->order('a.activity_id DESC')            ->paginate($this->pageNum, false, ['query' => request()->param()]);        return $this->fetch('', [            "activityList" => $activityList,        ]);    }    /**     * 获取供货商商品列表     */    public function getActivityGoods(){        $supplierId = input('supplier_id');        $goodsList = Db::name('goods')->where(['goods_supplier_id'=>['in',['-1',$supplierId]]])->field('goods_id,goods_name')->select();        if(!$goodsList) return returnState(100,'没有该供货商信息');        return returnState(200,'获取成功',[            'goodsList' => $goodsList,        ]);    }    /**     * 添加活动     */    public function createActivity()    {        if (Request::instance()->isPost()) {            $post_data = input('post.');            $result = $this->validate($post_data,'VActivity.createActivity');            if(strtotime($post_data['activity_start']) > strtotime($post_data['activity_end'])) return returnState(100,'开始时间不能大于结束时间');            if(true !== $result){                // 验证失败 输出错误信息                return returnState(100,$result);            }            foreach ($post_data['activity_machineList'] as $key => $value){                if(Db::name('activity')->where([                    'activity_goods_id'=>$post_data['activity_goods_id'],                    'activity_status'=>1,                    'activity_machineList'=>['like',"%,$value,%"],                ])->find()) return returnState(100,'已有相同机器和商品在参与活动中');            }            $post_data['activity_machineList'] = ','.implode(',',$post_data['activity_machineList']).',';            $post_data['activity_status'] = 1;            $post_data['activity_agent_id'] = $this->agentId;            $post_data['activity_createTime'] = date('Y-m-d H:i:s');            $ActivityModel = new ActivityModel();            $ActivityModel->allowField(true)->data($post_data)->save();            $activity_id = $ActivityModel->activity_id;            if (!$activity_id) return returnState(100,'新增失败，请重试');            return returnState(200,'新增成功', url('index'));        }        $supplierList = Db::name("supplier")->where(['supplier_status' => 1,'supplier_agent_id' => $this->agentId])->order('supplier_id asc')->select();        $machineList = Db::name('machine')->where(['machine_agent_id'=>$this->agentId])->select();        return $this->fetch('',[            "supplierList" => $supplierList,            'machineList' => [],        ]);    }    /**     * 编辑活动     */    public function editActivity()    {        $activity_id = input('activity_id');        $activity = Db::name('activity')->where(['activity_id' => $activity_id])->find();        if (Request::instance()->isPost()) {            $post_data = input('post.');            $result = $this->validate($post_data, 'VActivity.editActivity');            if (true !== $result) {                // 验证失败 输出错误信息                return returnState(100,$result);            }            $post_data['activity_machineList'] = ','.implode(',',$post_data['activity_machineList']).',';            $ActivityModel = new ActivityModel();            $ActivityModel->allowField('activity_name,activity_machineList')->save($post_data,['activity_id'=>$activity_id]);            return returnState(200,'保存成功',[],url('index'));        }        $machineList = Db::name('machine')->where(['machine_agent_id'=>$this->agentId])->select();        if($activity) $activity['activity_machineList'] = explode(',',substr($activity['activity_machineList'],1,-1));        return $this->fetch('',[            'activity' => $activity,            'machineList' => $machineList,        ]);    }    /**     * 活动下架     */    public function disabledActivity()    {        $activity_id = input('activity_id');        $map['activity_id'] = $activity_id;        $map['activity_status'] = 2;        $result = Db::name('activity')->update($map);        if(!$result) return returnState(100,'活动下架失败，请重试');        return returnState(200,'活动下架成功');    }    /**     * 活动上架     */    public function enabledActivity()    {        $activity_id = input('activity_id');        $map['activity_id'] = $activity_id;        $map['activity_status'] = 1;        $result = Db::name('machine')->update($map);        if(!$result) return returnState(100,'活动上架失败，请重试');        return returnState(200,'活动上架成功');    }    /**     * 优惠卷列表     * @return mixed     */    public function activityCouponList()    {        $activity_id = input('activity_id');        $info = Db::name('activity')->where(['activity_id'=>$activity_id])->find();        $map['coupon_activity_id'] = $activity_id;        $activityList = Db::name('activity_coupon')            ->where($map)            ->select();        return $this->fetch('',[            'info' => $info,            'activityList' => $activityList,        ]);    }    /**     * 添加优惠卷     */    public function createActivityCoupon(){        $activity_id = input('activity_id');        $info = Db::name('activity')->where(['activity_id'=>$activity_id])->find();        if(Request::instance()->isPost()){            if(!$info) return returnState(100,'没有找到对应活动');            $post_data = input('post.');            $post_data['coupon_activity_id'] = $activity_id;            $result = $this->validate($post_data, 'VActivity.createActivityCoupon');            if (true !== $result) {                // 验证失败 输出错误信息                return returnState(100,$result);            }            $post_data['coupon_surplus_number'] = $post_data['coupon_sum_number'];            $post_data['coupon_createTime'] = date('Y-m-d H:i:s');            $ActivityCouponModel = new ActivityCouponModel();            $ActivityCouponModel->allowField(true)->data($post_data)->save();            $coupon_id = $ActivityCouponModel->coupon_id;            if(!$coupon_id) return returnState(100,'保存失败');            return returnState(200,'保存成功',[],url('activityCouponList',['activity_id'=>$activity_id]));        }        return $this->fetch('',[            'info' => $info,        ]);    }    /**     * 禁用优惠卷     */    public function disabledCoupon()    {        $coupon_id = input('coupon_id');        $map['coupon_id'] = $coupon_id;        $map['coupon_status'] = 2;        $result = Db::name('activity_coupon')->update($map);        if(!$result) return returnState(100,'禁用优惠卷失败，请重试');        return returnState(200,'禁用优惠卷成功');    }    /**     * 恢复优惠卷     */    public function changeCouponStatus()    {        $coupon_id = input('coupon_id');        $map['coupon_id'] = $coupon_id;        $map['coupon_status'] = 1;        $result = Db::name('activity_coupon')->update($map);        if(!$result) return returnState(100,'恢复优惠卷失败，请重试');        return returnState(200,'恢复优惠卷成功');    }    public function userCouponlist(){        $activity_id = input('activity_id');        $coupon_id = input('coupon_id');        $status = input('status');        $where = [            'uc.log_activity_id' => ['eq',$activity_id],        ];        if(intval($coupon_id)!=0) $where['uc.log_coupon_id'] = ['eq',$coupon_id];        if(intval($status)!=0) $where['uc.log_status'] = ['eq',$status];        $userCouponList = Db::name('user_coupon')->alias('uc')            ->join('user u','uc.log_user_id = u.user_id')            ->join('activity_coupon ac','uc.log_coupon_id = ac.coupon_id')            ->where($where)            ->order('uc.log_id DESC')            ->paginate($this->pageNum, false, ['query' => request()->param()]);        $couponList = Db::name('activity_coupon')->where(['coupon_activity_id'=>$activity_id])->select();        return $this->fetch('', [            "couponList" => $couponList,            "userCouponList" => $userCouponList,        ]);    }}