<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/4/7 0007 * Time: 11:01 */namespace app\system\controller;use think\Config;use think\Db;use think\Env;use think\Loader;use think\Request;class Machine extends Common{    protected $pageNum = 20;    /**     * 首页     */    public function index(){        $agent = input("agent");        $status = input("status");        $address = input("address");        $code = input("code");        $map = [];        if(intval($agent) != 0) $map["a.agent_id"] = $agent;        if(intval($status) != 0) $map["m.machine_status"] = $status;        if(trim($code) != '') $map["m.machine_code"] = ["like","%$code%"];        if(trim($address) != '') $map["m.machine_address"] = ["like","%$address%"];        $machine_list = Db::name('machine')->alias("m")            ->join('agent a','a.agent_id = m.machine_agent_id','left')            ->join('rep r','m.machine_rep_id = r.rep_id','left')            ->order('m.machine_id DESC')            ->field("m.*,a.agent_name,r.rep_name")            ->where($map)            ->order('m.machine_id DESC')            ->paginate($this->pageNum,false,['query'=>request()->param()]);        $agent_list = Db::name("agent")->where(['agent_level'=>1])->select();        return $this->fetch('',[            "agent_list" => $agent_list,            "machine_list" => $machine_list,        ]);    }    /**     * 添加设备     */    public function createMachine(){        if(Request::instance()->isPost()){            $data = input('post.');            $result = $this->validate($data,'app\system\validate\VMachine.create');            if(true !== $result){                // 验证失败 输出错误信息                return $this->error($result);            }            $type_info = Db::name('machine_type')->where(['type_id'=>$data['machine_type_id']])->find();            if(!$type_info) return $this->error('未找到该设备类型');            $type_info['type_channel_content'] = json_decode($type_info['type_channel_content'],true);            $data['machine_code'] = trim($data['machine_code']);            $data['machine_status'] = 1;            $data["machine_name"] =$type_info["type_name"].$data["machine_code"];            $data['machine_createTime'] = date('Y-m-d H:i:s',time());            $machine_id = Db::name('machine')->insertGetId($data);            Db::name('machine')->update([                'machine_qr_file' =>  \machine\Machine::qrcode($machine_id),                'machine_id' => $machine_id,            ]);            $channel_data = [];            $start = $type_info["type_channel_content"]["channel_start"];            switch ($type_info['type_sort_type']){                case "1":                    for($i=$start;$i<= $type_info["type_channel_content"]["channel_total"];$i++){                            $channel_data[] = [                                "channel_name"=>$i,                                "channel_title"=>self::getNatrueName($i),                                "channel_capacity"=>$type_info["type_channel_content"]["channel_capacity"],                                "channel_stock"=>0,                                "channel_status"=>2,                                "channel_updateTime"=>date("Y-m-d H:i:s",time())                            ];                    }                    break;                case "2":                    for($i=$start;$i<= $type_info["type_channel_content"]["channel_level"];$i++){                        for ($y = $start;$y <= $type_info["type_channel_content"]["channel_list"];$y++){                            if($type_info["type_channel_content"]["channel_start"] == 0){                                $title = ($i+1)."-".($y+1);                            }else{                                $title = $i."-".$y;                            }                            $channel_data[] = [                                "channel_name"=>$i.$y,                                "channel_title"=>$title,                                "channel_capacity"=>$type_info["type_channel_content"]["channel_capacity"],                                "channel_stock"=>0,                                "channel_status"=>2,                                "channel_updateTime"=>date("Y-m-d H:i:s",time())                            ];                        }                    }                    break;            }            Db::name('machine_channel')->insertAll($channel_data);            if(!$machine_id) return $this->error('新增失败，请重试');            return $this->success('新增成功','index');        }        $map["agent_status"] = 1;        $map["agent_level"] = 1;        $agent_list = Db::name("agent")->where($map)->select();        $this->assign("agent_list",$agent_list);        $type_list = Db::name("machine_type")->where(['type_status'=>1])->select();        $this->assign("type_list",$type_list);        return $this->fetch();    }    public function qrcode($id='')    {        echo $id;        Loader::import('phpqrcode');        $URL_HEADER = 'http://'.Config::get('site_name').'/index/machine/index?id='.$id;        $save_qr = '/qr/qrcode_'.$id.'.png';        \QRcode::png($URL_HEADER,'.'.$save_qr,'L',8,2);//识别二维码之后存放到一个路径中        return $save_qr;    }    /**     * 编辑设备     */    public function edit_machine(){        $machine_id = input('machine_id');        $MachineModel = new \app\system\model\Machine();        $machine = $MachineModel->where(['machine_id'=>$machine_id])->find();        if(Request::isPost()){            $data = input('post.');            $result = $this->validate($data,'app\system\validate\VMachine.edit');            if(true !== $result){                // 验证失败 输出错误信息                return $this->error($result);            }            $data['machine_code'] = trim($data['machine_code']);            $data['machine_qr_file'] = \machine\Machine::qrcode($machine_id);            if($machine['machine_code'] != $data['machine_code']){                if(Db::name('machine')->where(['machine_code'=>$data['machine_code']])->count() > 0) return $this->error('机器号已存在');            }else if(Db::name('machine')->where(['machine_code'=>$data['machine_code']])->count() > 1){                    return $this->error('设备序列号重复');            }            $MachineModel->allowField(true)->save($data,['machine_id'=>$machine_id]);            return $this->success('保存成功',url('index'));        }        $this->assign('machine',$machine);        $agent_list = Db::name("agent")->where(['agent_status'=>1,'agent_level'=>1])->select();        $this->assign("agent_list",$agent_list);        return $this->fetch();    }    /**     * 机器详情     */    public function machine_details(){        $machine_id = input('machine_id');        $MachineModel = new \app\system\model\Machine();        $machine = $MachineModel->alias('m')            ->join('agent a','m.machine_agent_id=a.agent_id','left')            ->where(['machine_id'=>$machine_id])            ->field('m.*,a.agent_name')->find();        $this->assign('info',$machine);        return $this->fetch();    }    /**     * 禁用设备     */    public function disabled_machine(){        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        $map['machine_status'] = 2;        Db::startTrans();        try {            Db::name('machine')->update($map);            Db::commit();            return $this->success('禁用设备成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('禁用设备成功失败，请重试');        }    }    /**     * 禁用设备     */    public function enabled_machine(){        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        $map['machine_status'] = 1;        Db::startTrans();        try {            Db::name('machine')->update($map);            Db::commit();            return $this->success('启用设备成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('启用设备成功失败，请重试');        }    }    /**     * 删除设备     */    public function del_machine(){        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        Db::startTrans();        try {            Db::name('machine')->delete($map);            Db::commit();            return $this->success('删除成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('删除失败，请重试');        }    }    /**     * 货道列表     */    public function machine_channel(){        $machine_id = input('machine_id');        if(intval($machine_id) == 0){            return $this->error("设备ID获取失败，请重新进入页面");        }        $map['mc.channel_machine_id'] = $machine_id;        $channel_list = Db::name('machine_channel')            ->alias('mc')            ->join('goods g','g.goods_id = mc.channel_goods_id','left')            ->where($map)            ->field('mc.*,g.goods_name goods_name,g.goods_id goods_id,g.goods_type goods_type')            ->order('channel_name asc')            ->select();        $goods_list = Db::name('goods')->select();        $this->assign('goods_list',$goods_list);        $this->assign('channel_list',$channel_list);        $this->assign('machine_id',$machine_id);        return $this->fetch();    }    /**     * 编辑货道     */    public function edit_channel(){        if("POST" == request()->method()){            $post_data = input('post.');            $channel_info = Db::name('machine_channel')->where(['channel_id'=>$post_data['channel_id']])->find();            if($post_data['channel_stock'] > $post_data['channel_capacity']) {                return $this->error('库存不能大于货道容量');            }            $data = [                'channel_id'=> $post_data['channel_id'],                'channel_goods_id'=> $post_data['channel_goods_id'],                'channel_capacity'=> $post_data['channel_capacity'],                'channel_stock'=> $post_data['channel_stock'],                'channel_goods_price'=> $post_data['channel_goods_price'],            ];            Db::startTrans();            try {                Db::name('machine_channel')->update($data);                Db::commit();                return $this->success('编辑成功',url('machine_channel',['machine_id'=>$channel_info['channel_machine_id']]));            } catch (\PDOException $e) {                Db::rollback();                return $this->error('编辑失败，请重试');            }        }    }    /**     * 恢复设备货道     */    public function nor_channel(){        $channel_id = input('channel_id');        $map['channel_id'] = $channel_id;        $map['channel_status'] = 1;        $channel_info =  Db::name('machine_channel')->where(['channel_id'=>$channel_id])->find();        if(!$channel_info) return $this->error('没有货道信息');        if($channel_info['channel_goods_id'] > 0 && !Db::name('goods')->where(['goods_id'=>$channel_info['channel_goods_id'],'goods_status'=>1])->find()){            return $this->error('恢复设备货道失败，商品已下架/已删除，请先更换商品');        }        Db::startTrans();        try {            Db::name('machine_channel')->update($map);            Db::commit();            return $this->success('恢复设备货道成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('恢复设备货道失败，请重试');        }    }    /**     * 禁用设备货道     */    public function dis_channel(){        $channel_id = input('channel_id');        $map['channel_id'] = $channel_id;        $map['channel_status'] = 2;        Db::startTrans();        try {            Db::name('machine_channel')->update($map);            Db::commit();            return $this->success('禁用设备货道成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('禁用设备货道失败，请重试');        }    }    public function getNatrueName($value)    {        return  str_pad($value,2,'0',STR_PAD_LEFT );    }}