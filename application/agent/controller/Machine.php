<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/4/7 0007 * Time: 11:01 */namespace app\agent\controller;use think\Db;use think\Request;class Machine extends Common{    protected $pageNum = 20;    /**     * 首页     */    public function index()    {        $agent = input("agent");        $status = input("status");        $address = input("address");        $code = input("code");        $map = [];        if (intval($agent) != 0) $map["a.agent_id"] = $agent;        if (intval($status) != 0) $map["m.machine_status"] = $status;        if (trim($code) != '') $map["m.machine_code"] = ["like", "%$code%"];        if (trim($address) != '') $map["m.machine_address"] = ["like", "%$address%"];        $machine_list = Db::name('machine')->alias("m")            ->join('agent a', 'a.agent_id = m.machine_agent_id', 'left')            ->join('rep r', 'm.machine_rep_id = r.rep_id', 'left')            ->order('m.machine_id DESC')            ->field("m.*,a.agent_name,r.rep_name")            ->where($map)            ->order('m.machine_id DESC')            ->paginate($this->pageNum, false, ['query' => request()->param()]);        $agent_list = Db::name("agent")->where(['agent_level' => 1])->select();        self::assign('code',$code);        self::assign('address',$address);        self::assign('agent',$agent);        self::assign('status',$status);        return $this->fetch('', [            "agent_list" => $agent_list,            "machine_list" => $machine_list,        ]);    }    /**     * 添加设备     */    public function createMachine()    {        if (Request::instance()->isPost()) {            $data = input('post.');            $result = $this->validate($data, 'app\system\validate\VMachine.create');            if (true !== $result) {                // 验证失败 输出错误信息                return $this->error($result);            }            $type_info = Db::name('machine_type')->where(['type_id' => $data['machine_type_id']])->find();            if (!$type_info) return $this->error('未找到该设备类型');            $type_info['type_channel_content'] = json_decode($type_info['type_channel_content'], true);            $data['machine_code'] = trim($data['machine_code']);            $data['machine_status'] = 1;            $data["machine_name"] = "【".$type_info["type_name"] ."】". $data["machine_code"];            $data['machine_createTime'] = date('Y-m-d H:i:s', time());            $machine_id = Db::name('machine')->insertGetId($data);            Db::name('machine')->update([                'machine_qr_file' => \machine\Machine::qrcode($machine_id),                'machine_id' => $machine_id,            ]);            $channel_data = [];            $start = $type_info["type_channel_content"]["channel_start"];            switch ($type_info['type_sort_type']) {                case "1":                    if ($type_info["type_channel_content"]["channel_start"] == 0) {                        $end = $type_info["type_channel_content"]["channel_total"]-1;                    }else{                        $end = $type_info["type_channel_content"]["channel_total"];                    }                    for ($i = $start; $i <= $end; $i++) {                        $channel_data[] = [                            "channel_machine_id" => $machine_id,                            "channel_name" => $i,                            "channel_title" => self::getNatrueName($i),                            "channel_capacity" => $type_info["type_channel_content"]["channel_capacity"],                            "channel_stock" => 0,                            "channel_status" => 2,                            "channel_updateTime" => date("Y-m-d H:i:s", time())                        ];                    }                    break;                case "2":                    if ($type_info["type_channel_content"]["channel_start"] == 0) {                        $end_i = $type_info["type_channel_content"]["channel_level"]-1;                        $end_y = $type_info["type_channel_content"]["channel_list"]-1;                    }else{                        $end_i = $type_info["type_channel_content"]["channel_level"];                        $end_y = $type_info["type_channel_content"]["channel_list"];                    }                    for ($i = $start; $i <= $end_i; $i++) {                        for ($y = $start; $y <= $end_y; $y++) {                            if ($type_info["type_channel_content"]["channel_start"] == 0) {                                $title = ($i + 1) . "-" . ($y + 1);                            } else {                                $title = $i . "-" . $y;                            }                            $channel_data[] = [                                "channel_machine_id" => $machine_id,                                "channel_name" => $i . $y,                                "channel_title" => $title,                                "channel_capacity" => $type_info["type_channel_content"]["channel_capacity"],                                "channel_stock" => 0,                                "channel_status" => 2,                                "channel_updateTime" => date("Y-m-d H:i:s", time())                            ];                        }                    }                    break;            }            Db::name('machine_channel')->insertAll($channel_data);            if (!$machine_id) return $this->error('新增失败，请重试');            return $this->success('新增成功', 'index');        }        $map["agent_status"] = 1;        $map["agent_level"] = 1;        $agent_list = Db::name("agent")->where($map)->select();        $this->assign("agent_list", $agent_list);        $type_list = Db::name("machine_type")->where(['type_status' => 1])->select();        $this->assign("type_list", $type_list);        return $this->fetch();    }    /**     * 编辑设备     */    public function editMachine()    {        $machine_id = input('machine_id');        $MachineModel = new \app\system\model\Machine();        $machine = $MachineModel->where(['machine_id' => $machine_id])->find();        if (Request::isPost()) {            $data = input('post.');            $result = $this->validate($data, 'app\system\validate\VMachine.edit');            if (true !== $result) {                // 验证失败 输出错误信息                return $this->error($result);            }            $data['machine_code'] = trim($data['machine_code']);            $data['machine_qr_file'] = \machine\Machine::qrcode($machine_id);            if ($machine['machine_code'] != $data['machine_code']) {                if (Db::name('machine')->where(['machine_code' => $data['machine_code']])->count() > 0) return $this->error('机器号已存在');            } else if (Db::name('machine')->where(['machine_code' => $data['machine_code']])->count() > 1) {                return $this->error('设备序列号重复');            }            $MachineModel->allowField(true)->save($data, ['machine_id' => $machine_id]);            return $this->success('保存成功', url('index'));        }        $this->assign('machine', $machine);        $agent_list = Db::name("agent")->where(['agent_status' => 1, 'agent_level' => 1])->select();        $this->assign("agent_list", $agent_list);        return $this->fetch();    }    /**     * 机器详情     */    public function machine_details()    {        $machine_id = input('machine_id');        $MachineModel = new \app\system\model\Machine();        $machine = $MachineModel->alias('m')            ->join('agent a', 'm.machine_agent_id=a.agent_id', 'left')            ->where(['machine_id' => $machine_id])            ->field('m.*,a.agent_name')->find();        $this->assign('info', $machine);        return $this->fetch();    }    /**     * 禁用设备     */    public function disabled_machine()    {        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        $map['machine_status'] = 2;        try {            Db::name('machine')->update($map);            Db::commit();            return $this->success('禁用设备成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('禁用设备成功失败，请重试');        }    }    /**     * 禁用设备     */    public function enabled_machine()    {        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        $map['machine_status'] = 1;        try {            Db::name('machine')->update($map);            Db::commit();            return $this->success('启用设备成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('启用设备成功失败，请重试');        }    }    /**     * 删除设备     */    public function del_machine()    {        $machine_id = input('machine_id');        $map['machine_id'] = $machine_id;        try {            Db::name('machine')->delete($map);            Db::commit();            return $this->success('删除成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('删除失败，请重试');        }    }    /**     * 货道列表     * @return mixed     */    public function machineChannel()    {        $machine_id = input('machine_id');        if (intval($machine_id) == 0) {            return $this->error("设备ID获取失败，请重新进入页面");        }        $map['mc.channel_machine_id'] = $machine_id;        $machine = Db::name("machine")->where("machine_id",$machine_id)->field("machine_name")->find();        $channel_list = Db::name('machine_channel')            ->alias('mc')            ->join('goods g', 'g.goods_id = mc.channel_goods_id', 'left')            ->where($map)            ->field('mc.*,g.goods_price goods_price,g.goods_name goods_name,g.goods_type goods_type,g.goods_pic goods_pic,mc.channel_capacity - mc.channel_stock channel_outStock')            ->paginate(20, false, ['query' => request()->param()]);        $goods_list = Db::name('goods')->select();        $this->assign('goods_list', $goods_list);        $this->assign('channel_list', $channel_list);        $this->assign('machine_id', $machine_id);        $this->assign("machine",$machine);        return $this->fetch();    }    /**     * 创建货道     */    public function create_channel()    {        if ($this->request->isPost()) {            $data = [                'channel_name' => input('channel_name'),                'channel_capacity' => input('channel_capacity'),                'channel_num' => input('channel_num'),                'channel_status' => 1,                'channel_createTime' => date('y-m-d H:i:s', time()),                'channel_type' => input('channel_type')            ];            if ($data["channel_name"] == 9 || $data["channel_name"] == 19 || $data["channel_name"] == 29 || $data["channel_name"] == 39 || $data["channel_name"] == 49) {                return $this->error("货道名称不能为9、19、29、39、49、59");            }            $mc['mc_machine_id'] = input('machine_id');            $cg['cg_goods_id'] = input('goods_id');            Db::startTrans();            try {                $channel_id = Db::name('channel')->insertGetId($data);                $mc['mc_channel_id'] = $channel_id;                $cg['cg_channel_id'] = $channel_id;                Db::name('machine_channel')->insert($mc);                Db::name('channel_goods')->insert($cg);                Db::commit();                $url = url('machine_channel', ['machine_id' => $mc['mc_machine_id']]);                return $this->success('新增成功', $url);            } catch (\PDOException $e) {                Db::rollback();                return $this->error('新增失败，请重试');            }        }    }    /**     * 创建货道     */    public function create_any_channel()    {        if ($this->request->isPost()) {            $data = [                'channel_capacity' => input('channel_capacity'),                'channel_num' => input('channel_num'),                'channel_status' => 1,                'channel_createTime' => date('y-m-d H:i:s', time()),                'channel_type' => input('channel_type')            ];            $start_name = intval(input("channel_start_name"));            $end_name = intval(input("channel_end_name"));            $mc['mc_machine_id'] = input('machine_id');            $cg['cg_goods_id'] = input('goods_id');            Db::startTrans();            try {                for ($i = $start_name; $i <= $end_name; $i++) {                    $chan["mc.mc_machine_id"] = input('machine_id');                    $chan["c.channel_name"] = $i;                    $channel = Db::name("channel")                        ->alias("c")                        ->join("machine_channel mc", "mc.mc_channel_id = c.channel_id", 'left')                        ->where($chan)                        ->find();                    if (!$channel) {                        if ($i != 9 && $i != 19 && $i != 29 && $i != 39 && $i != 49) {                            $data["channel_name"] = $i;                            $channel_id = Db::name('channel')->insertGetId($data);                            $mc['mc_channel_id'] = $channel_id;                            $cg['cg_channel_id'] = $channel_id;                            Db::name('machine_channel')->insert($mc);                            Db::name('channel_goods')->insert($cg);                        }                    }                }                Db::commit();                $url = url('machine_channel', ['machine_id' => $mc['mc_machine_id']]);                return $this->success('批量创建货道成功', $url);            } catch (\PDOException $e) {                Db::rollback();                return $this->error('批量创建货道失败，请稍后再试！');            }        }    }    /**     * 编辑货道     */    public function editChannel()    {        if ($this->request->isPost()) {            $machine_id = input("post.machine_id");            $input = $this->request->except('machine_id');//            print_r($input);            if(intval($input["channel_price"]) == 0){                return self::error("商品售价不能为0");            }            Db::startTrans();            try {                Db::name('machine_channel')->update($input);                Db::commit();                $url = url('machineChannel', ['machine_id' => $machine_id]);                return $this->success('编辑成功', $url);            } catch (\PDOException $e) {                Db::rollback();                return $this->error('编辑失败，网络异常');            }        }    }    /**     * 恢复设备货道     */    public function nor_channel()    {        $channel_id = input('channel_id');        $map['channel_id'] = $channel_id;        $map['channel_status'] = 1;        try {            Db::name('channel')->update($map);            Db::commit();            return $this->success('恢复设备货道成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('恢复设备货道失败，请重试');        }    }    /**     * 禁用设备货道     */    public function dis_channel()    {        $channel_id = input('channel_id');        $map['channel_id'] = $channel_id;        $map['channel_status'] = 3;        try {            Db::name('channel')->update($map);            Db::commit();            return $this->success('禁用设备货道成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('禁用设备货道失败，请重试');        }    }    /**     * 删除设备货道     */    public function del_channel()    {        $channel_id = input('channel_id');        $map['channel_id'] = $channel_id;        try {            Db::name('channel')->delete($map);            Db::commit();            return $this->success('删除设备货道成功');        } catch (\PDOException $e) {            Db::rollback();            return $this->error('删除设备货道失败，请重试');        }    }    public function getNatrueName($value)    {        return str_pad($value, 2, '0', STR_PAD_LEFT);    }}